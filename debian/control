Source: golang-go.uber-zap
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Uploaders: Nilesh Patra <nilesh@debian.org>
Section: golang
Testsuite: autopkgtest-pkg-go
Priority: optional
Build-Depends: debhelper-compat (= 13),
               dh-sequence-golang,
               golang-any (>= 2:1.18~),
               golang-github-benbjohnson-clock-dev,
               golang-github-pkg-errors-dev,
               golang-github-stretchr-testify-dev (>= 1.8.0),
               golang-go.uber-atomic-dev (>= 1.7.0),
               golang-go.uber-multierr-dev (>= 1.6.0),
               golang-uber-goleak-dev,
               golang-gopkg-yaml.v3-dev (>= 3.0.1),
               golang-google-grpc-dev
Standards-Version: 4.6.2
Vcs-Browser: https://salsa.debian.org/go-team/packages/golang-go.uber-zap
Vcs-Git: https://salsa.debian.org/go-team/packages/golang-go.uber-zap.git
Homepage: https://github.com/uber-go/zap
Rules-Requires-Root: no
XS-Go-Import-Path: go.uber.org/zap

Package: golang-go.uber-zap-dev
Architecture: all
Multi-Arch: foreign
Depends: ${misc:Depends},
         golang-github-benbjohnson-clock-dev,
         golang-github-pkg-errors-dev,
         golang-github-stretchr-testify-dev (>= 1.8.0),
         golang-go.uber-atomic-dev (>= 1.7.0),
         golang-go.uber-multierr-dev (>= 1.6.0),
         golang-uber-goleak-dev,
         golang-gopkg-yaml.v3-dev (>= 3.0.1)
Description: Blazing fast, structured, leveled logging in Go
 Package zap provides fast, structured, leveled logging.
 .
 For applications that log in the hot path, reflection-based
 serialization and string formatting are prohibitively expensive,
 they're CPU-intensive and make many small allocations. Put
 differently, using json.Marshal and fmt.Fprintf to log tons of
 interface{} makes your application slow.
 .
 Zap takes a different approach. It includes a reflection-free,
 zero-allocation JSON encoder, and the base Logger strives to avoid
 serialization overhead and allocations wherever possible. By
 building the high-level SugaredLogger on that foundation, zap lets
 users choose when they need to count every allocation and when
 they'd prefer a more familiar, loosely typed API.
